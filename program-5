PRIORITY:
#include <stdio.h>
typedef struct {
    int pid; 
    int priority; 
    int burst_time; 
} Process;
void priority_scheduling(Process processes[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (processes[i].priority > processes[j].priority) {
                Process temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }
    int waiting_time[n];
    waiting_time[0] = 0;
    for (int i = 1; i < n; i++) {
        waiting_time[i] = waiting_time[i - 1] + processes[i - 1].burst_time;
    }
    int turn_around_time[n];
    for (int i = 0; i < n; i++) {
        turn_around_time[i] = waiting_time[i] + processes[i].burst_time;
    }
    printf("PID\tPriority\tBurst Time\tWaiting Time\tTurn Around Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].priority, processes[i].burst_time, waiting_time[i], turn_around_time[i]);
    }
    float avg_waiting_time = 0;
    float avg_turn_around_time = 0;
    for (int i = 0; i < n; i++) {
        avg_waiting_time += waiting_time[i];
        avg_turn_around_time += turn_around_time[i];
    }
    avg_waiting_time /= n;
    avg_turn_around_time /= n;

    printf("\nAverage Waiting Time: %.2f\n", avg_waiting_time);
    printf("Average Turn Around Time: %.2f\n", avg_turn_around_time);
}

int main() {
    Process processes[] = {
        {1, 3, 10},
        {2, 1, 1},
        {3, 4, 2},
        {4, 2, 1}
    };
    int n = sizeof(processes) / sizeof(processes[0]);
    priority_scheduling(processes, n);
    return 0;
}


