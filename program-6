ROUND ROBIN SCHEDULING:
#include <stdio.h>

typedef struct {
    int pid;
    int bi;
    int ai;
} Process;

void calculateWaitingTime(Process proc[], int n, int wt[], int quan) {
    int rem_bt[n];
    for (int i = 0; i < n; i++)
        rem_bt[i] = proc[i].bi;
    int t = 0;

    while (1) {
        int done = 1;
        for (int i = 0; i < n; i++) {
            if (rem_bt[i] > 0) {
                done = 0;
                if (rem_bt[i] > quan) {
                    t += quan;
                    rem_bt[i] -= quan;
                } else {
                    t += rem_bt[i];
                    wt[i] = t - proc[i].bi;
                    rem_bt[i] = 0;
                }
            }
        }
        if (done == 1)
            break;
    }
}

void calculateTurnaroundTime(Process proc[], int n, int wt[], int tat[]) {
    for (int i = 0; i < n; i++)
        tat[i] = proc[i].bi + wt[i];
}

void calculateAverageTime(Process proc[], int n, int quan) {
    int wt[n], tat[n], total_wt = 0, total_tat = 0;

    calculateWaitingTime(proc, n, wt, quan);
    calculateTurnaroundTime(proc, n, wt, tat);

    printf("Processes   Arrival time   Burst time   Waiting time   Turnaround time\n");
    for (int i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
        printf("   %d ", proc[i].pid);
        printf("          %d ", proc[i].ai);
        printf("         %d ", proc[i].bi);
        printf("            %d", wt[i]);
        printf("                %d\n", tat[i]);
    }
    printf("Average waiting time = %.2f\n", (float)total_wt / (float)n);
    printf("Average turnaround time = %.2f\n", (float)total_tat / (float)n);
}

int main() {
    int n, quan;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process proc[n];
    for (int i = 0; i < n; i++) {
        printf("Enter process ID, arrival time, and burst time for process %d: ", i + 1);
        scanf("%d %d %d", &proc[i].pid, &proc[i].ai, &proc[i].bi);
    }

    printf("Enter the time quantum: ");
    scanf("%d", &quan);

    calculateAverageTime(proc, n, quan);
    return 0;
}
