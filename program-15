SEQUENTIAL FILE ALLOCATION:
#include <stdio.h>
#include <stdlib.h>

#define MAX_RECORDS 100
#define RECORD_SIZE 50

typedef struct {
    int id;
    char name[RECORD_SIZE];
} Record;

void writeRecords(const char *filename, int numRecords) {
    FILE *file = fopen(filename, "wb");
    if (file == NULL) {
        perror("Unable to open file for writing");
        exit(EXIT_FAILURE);
    }

    Record record;
    for (int i = 0; i < numRecords; i++) {
        printf("Enter ID for record %d: ", i + 1);
        scanf("%d", &record.id);
        printf("Enter name for record %d: ", i + 1);
        scanf("%s", record.name);
        fwrite(&record, sizeof(Record), 1, file);
    }

    fclose(file);
}

void readRecords(const char *filename) {
    FILE *file = fopen(filename, "rb");
    if (file == NULL) {
        perror("Unable to open file for reading");
        exit(EXIT_FAILURE);
    }

    Record record;
    while (fread(&record, sizeof(Record), 1, file) == 1) {
        printf("ID: %d, Name: %s\n", record.id, record.name);
    }

    fclose(file);
}

int main() {
    const char *filename = "records.dat";
    int numRecords;

    printf("Enter the number of records to write (max %d): ", MAX_RECORDS);
    scanf("%d", &numRecords);
    if (numRecords > MAX_RECORDS) {
        printf("Number of records exceeds the maximum limit of %d.\n", MAX_RECORDS);
        return 1;
    }

    writeRecords(filename, numRecords);
    printf("Records written to file.\n");

    printf("Reading records from file:\n");
    readRecords(filename);

    return 0;
}
